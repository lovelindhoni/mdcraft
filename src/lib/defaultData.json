{
	"markdown": {
		"mdcheatsheet": "# Markdown Cheatsheet\n\n Thanks for visiting [MdCraft](https://www.markdownguide.org)!\n\nThis Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax). Click the toggle above to tinker with the source of this note.\n\n## Basic Syntax\n\nThese are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements, so does MdCraft! :fire:\n\n### Heading\n\n# H1\n## H2\n### H3\n\n### Bold\n\n**bold text**\n\n### Italic\n\n*italicized text*\n\n### Blockquote\n\n> blockquote\n\n### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n### Unordered List\n\n- First item\n- Second item\n- Third item\n\n### Code\n\n`code`\n\n### Horizontal Rule\n\n---\n\n### Link\n\n[Markdown Guide](https://www.markdownguide.org)\n\n### Image\n\n![alt text](https://www.markdownguide.org/assets/images/tux.png)\n\n## Extended Syntax\n\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. But MdCraft support these out-of-the-box :sunglasses:\n\n### Table\n\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title |\n| Paragraph   | Text |\n\n### Fenced Code Block\n\n```cpp\n#include <iostream>\nusing namespace std;\nint main(){\n  cout << \"Hello World\" << endl;\n}\n```\n\n### Strikethrough\n\n~~The world is flat.~~\n\n### Task List\n\n- [x] Write the press release\n- [x] Update the website\n- [ ] Contact the media\n\n### Emoji\n\nThat is so funny! :joy:\n\n(See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji) and [List of Emoji Shortcodes](https://streamlit-emoji-shortcodes-streamlit-app-gwckff.streamlit.app/))\n\n### Highlight\n\nI need to highlight these ==very important words==."
	},
	"python": {
		"pythonbasics": "# Python Basics\n\nPython is a high-level, versatile programming language known for its simplicity and readability. Here are some fundamental concepts and syntax you should be familiar with:\n\n1. **Variables and Data Types**:\n   - Python supports various data types, including integers, floats, strings, and booleans.\n   - Variables are used to store data, and you can assign values to them using `=`.\n```py\nage = 30\nname = \"John\"\nis_student = True\n```\n\n2. **Control Structures**:\n   - Python uses indentation for code blocks, such as loops and conditionals.\n   - Common control structures include `if`, `elif`, `else`, `for` loops, and `while` loops.\n```py\nif is_student:\n    print(f\"{name} is a student.\")\nelse:\n    print(f\"{name} is not a student.\")\n```\n\n3. **Functions**:\n   - Functions are defined using the `def` keyword.\n   - You can pass arguments to functions and return values using the `return` statement.\n```py\ndef greet_person(person_name):\n    print(f\"Hello, {person_name}!\")\n\ngreet_person(\"Alice\")\n```\n\n4. **Lists and Dictionaries**:\n   - Lists are ordered collections of items, and dictionaries are key-value pairs.\n   - Lists are defined with square brackets, and dictionaries use curly braces.\n```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\nperson = {\"name\": \"Bob\", \"age\": 25}\n```\n\n5. **String Manipulation**:\n   - Python offers powerful string manipulation functions.\n   - You can concatenate strings with `+`, access characters by index, and use slicing.\n```py\nmessage = f\"My name is {name} and I am {age} years old.\"\n```\n\n6. **Input and Output**:\n   - Use `input()` to get user input and `print()` to display output.\n   - You can format output using string formatting techniques.\n```py\nuser_input = input(\"Enter your name: \")\nprint(f\"Hello, {user_input}!\")\n```\n\n7. **Comments**:\n   - Comments start with `#` and are used to document your code.\n```py\n# This is a user-defined comment\n```\n\nRemember, mastering these basics is crucial before moving on to more advanced Python concepts.",
		"pythonoops": "# Object-Oriented Programming (OOP) in Python\n\nPython supports object-oriented programming, a paradigm that organizes code into objects with attributes and methods. Key concepts and syntax for OOP in Python include:\n\n1. **Classes and Objects**:\n   - Classes define the blueprint for objects, specifying attributes and methods.\n   - Objects are instances of classes.\n```py\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n\nperson1 = Person(\"Alice\", 30)\nperson1.greet()\n```\n\n2. **Inheritance**:\n   - Inheritance allows a class (subclass) to inherit attributes and methods from another class (superclass).\n   - Python supports single and multiple inheritance.\n```py\nclass Student(Person):\n    def __init__(self, name, age, student_id):\n        super().__init__(name, age)\n        self.student_id = student_id\n\n    def study(self):\n        print(f\"{self.name} is studying.\")\n\nstudent1 = Student(\"Bob\", 20, \"S12345\")\nstudent1.greet()\nstudent1.study()\n```\n\n3. **Encapsulation**:\n   - Encapsulation hides the internal implementation details of a class from the outside.\n   - Use private and protected access specifiers (`__` and `_`) to control visibility.\n```py\nclass BankAccount:\n    def __init__(self, balance=0):\n        self._balance = balance\n\n    def deposit(self, amount):\n        self._balance += max(amount, 0)\n\n    def withdraw(self, amount):\n        self._balance -= 0 < amount <= self._balance and amount\n\n    def get_balance(self):\n        return self._balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\naccount.withdraw(200)\nprint(f\"Balance: ${account.get_balance()}\")\n```\n\n4. **Polymorphism**:\n   - Polymorphism allows objects of different classes to be treated as objects of a common base class.\n   - Achieved through method overriding and interfaces (using abstract base classes).\n```py\nclass Dog:\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat:\n    def speak(self):\n        return \"Meow!\"\n\ndef animal_sound(animal):\n    return animal.speak()\n\ndog, cat = Dog(), Cat()\n\nprint(animal_sound(dog))  # Output: \"Woof!\"\nprint(animal_sound(cat))  # Output: \"Meow!\"\n```\n\n5. **Special Methods**:\n   - Python provides special methods (dunder methods) like `__init__`, `__str__`, and `__add__`.\n   - These methods enable custom behavior for classes.\n```py\nclass Vector:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n\n    def __str__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nv1, v2 = Vector(1, 2), Vector(3, 4)\n\nprint(v1)          # Output: Vector(1, 2)\nprint(v1 + v2)     # Output: Vector(4, 6)\nprint(v1 == v2)    # Output: False\n```\n\n6. **Properties and Decorators**:\n   - Properties are used to control access to class attributes.\n   - Decorators like `@property` and `@classmethod` modify class and instance behavior.\n```py\nclass Temperature:\n    def __init__(self, celsius):\n        self._celsius = celsius\n\n    @property\n    def celsius(self):\n        return self._celsius\n\n    @celsius.setter\n    def celsius(self, value):\n        if value >= -273.15:\n            self._celsius = value\n\n    @property\n    def fahrenheit(self):\n        return (self._celsius * 9/5) + 32\n\ntemp = Temperature(25)\nprint(f\"Celsius: {temp.celsius}\")\nprint(f\"Fahrenheit: {temp.fahrenheit}\")\n\ntemp.celsius = 32\nprint(f\"Celsius: {temp.celsius}\")\nprint(f\"Fahrenheit: {temp.fahrenheit}\")\n```\n\nUnderstanding OOP is essential for building complex and organized Python applications.",
		"pythonfilehandilin": "# Error Handling and File I/O in Python\n\nEffective error handling and file input/output operations are essential in Python development. Here's an overview of these topics:\n\n1. **Exception Handling**:\n   - Python uses `try`, `except`, `finally`, and `raise` for handling exceptions.\n   - You can catch specific exceptions or use a generic `except` block.\n```py\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Error: {e}\")\nfinally:\n    print(\"This block always executes.\")\n```\n\n2. **File I/O**:\n   - Use `open()` to work with files in Python.\n   - Modes like 'r' (read), 'w' (write), and 'a' (append) determine file access.\n   - Always close files using `close()` or utilize the `with` statement.\n```py\ntry:\n    with open(\"example.txt\", \"r\") as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError as e:\n    print(f\"Error: {e}\")\n```\n\n3. **Exception Hierarchy**:\n   - Python has a hierarchy of exceptions, with `BaseException` at the top.\n   - Common exceptions include `IOError`, `ValueError`, `TypeError`, and `FileNotFoundError`.\n```py\ntry:\n    result = 10 / 0\nexcept BaseException as e:\n    print(f\"Caught an exception: {e}\")\n```\n\n4. **Custom Exceptions**:\n   - You can create custom exceptions by defining new classes that inherit from `Exception` or its subclasses.\n```py\nclass MyCustomError(Exception):\n    def __init__(self, message):\n        super().__init__(message)\n\ntry:\n    raise MyCustomError(\"This is a custom error.\")\nexcept MyCustomError as e:\n    print(f\"Custom Error: {e}\")\n```\n\n5. **Handling Errors Gracefully**:\n   - Proper error handling ensures your program doesn't crash unexpectedly.\n   - Logging and error messages help with debugging.\n\nThese topics are crucial for robust Python applications that can handle unexpected situations and interact with external data sources."
	},
	"typescript": {
		"typescriptbasics": "# TypeScript Basics\n\nTypeScript is a statically typed superset of JavaScript, offering developers enhanced type safety and tooling support while compiling to standard JavaScript.\n\n1. **Syntax**:\n   - TypeScript's syntax closely resembles JavaScript, making it easy to transition from JavaScript to TypeScript.\n   - Type annotations help specify the expected data types for variables.\n```ts\n// TypeScript uses a syntax similar to JavaScript, but with type annotations.\nlet message: string = \"Hello, TypeScript!\";\n```\n\n2. **Type Annotations**:\n   - Type annotations provide a clear way to declare and enforce variable types.\n   - In the example, age is explicitly annotated as a number, and name parameter is annotated as a string.\n```ts\n// Use type annotations to declare variable types explicitly.\nlet age: number = 30;\nfunction greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n```\n\n3. **Interfaces and Types**:\n   - Interfaces and custom types help define structured data shapes.\n   - Person is an `interface` with name and age properties, and Point is a `custom type` for coordinates.\n```ts\n// Define custom data structures with interfaces and types.\ninterface Person {\n    name: string;\n    age: number;\n}\n\ntype Point = { x: number; y: number; };\n```\n\n4.  **Type Inference**:\n    - TypeScript can automatically determine the type of a variable if not explicitly provided.\n    - In this case, count is inferred as a number based on the assigned value.\n```ts\n// TypeScript infers types when not explicitly annotated.\nlet count = 5; // TypeScript infers count as a number.\n```\n\n5. **Enums**:\n   - Enums provide a way to define a set of named constants.\n   - Color `enum` defines named constants, and chosenColor is assigned one of these constants.\n```ts\n// Use enums to define a set of named constants.\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n\nlet chosenColor: Color = Color.Red;\n```\n",
		"advancedtypescript": "# Advanced TypeScript Concepts\n\nAdvanced TypeScript concepts empower developers to write highly flexible and expressive code, enabling better type safety and code structuring in complex applications.\n\n1. **Generics**:\n   - Generics allow you to write functions and classes that work with different types.\n   - In the example, identity is a generic function that returns its argument of type T.\n```ts\n// Write flexible and reusable code with generics.\nfunction identity<T>(arg: T): T {\n    return arg;\n}\nconsole.log(identity<string>(\"Homelander));\n```\n\n2. **Union and Intersection Types**:\n   - Union types `|` allow you to define types that can be one of several types.\n   - Intersection types `&` allow you to create types by combining multiple types.\n```ts\n// Combine types with unions and intersections.\ntype Cat = { name: string; purrs: boolean };\ntype Dog = { name: string; barks: boolean };\ntype Pet = Cat | Dog;\n```\n\n3. **Advanced Type Manipulation**:\n   - Mapped types enable you to create new types based on the structure of existing types.\n   - The Mutable mapped type removes the readonly modifier from all properties of T.\n```ts\n// Use mapped types to create new types.\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\n```\n\n4. **Type Guards**:\n   - Type guards are functions that refine the type of a value within a specific block.\n   - isNumber is a type guard that checks if x is a number.\n```ts\n// Narrow down types with type guards.\nfunction isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n```\n\n5. **Decorators**:\n   - Decorators are a way to add metadata and modify the behavior of classes and class members.\n   - The log decorator logs method calls and then calls the original method.\n```ts\n// Create and use decorators for metadata and behavior modification.\nfunction log(target: any, key: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n        console.log(`Calling ${key} with arguments ${args}`);\n        return originalMethod.apply(this, args);\n    };\n}\n```\nUnderstanding and mastering these concepts can greatly improve code quality and maintainability in TypeScript projects.",
		"typescriptinpractice": "# TypeScript in Practice\n\nTypeScript in practice involves integrating TypeScript into module systems, configuring development tooling using tsconfig.json, gradually introducing TypeScript into existing JavaScript projects, writing tests with frameworks like Jest, and following best practices for clean and maintainable code.\n\n1. **Module Systems**:\n   - TypeScript supports module systems such as CommonJS and ES6 modules.\n   - You can export and import functions, classes, and variables between modules.\n```ts\n// Export and import modules with TypeScript.\n// Exporting module:\nexport function add(a: number, b: number): number {\n    return a + b;\n}\n\n// Importing module:\nimport { add } from './math';\n```\n2. **Tooling**:\n   - The `tsconfig.json` file is used to configure TypeScript compiler options.\n   - In this example, it specifies the target ECMAScript version and the output directory.\n```ts\n// Configure TypeScript using tsconfig.json.\n{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"CommonJS\",\n        \"outDir\": \"dist\"\n    }\n}\n```\n3. **Integration with Javascript**:\n   - TypeScript can be incrementally adopted in existing JavaScript projects.\n   - You can start by adding type annotations to JavaScript code.\n```ts\n// Gradually introduce TypeScript into JavaScript projects.\n// .js file\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// .ts file\nfunction greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n```\n4. **Testing**:\n   - Testing TypeScript code is similar to testing JavaScript code.\n   - You can use testing frameworks like Jest to write and run tests.\n```ts\n// Write tests for TypeScript code using testing frameworks like Jest.\n// Example test for a function:\nimport { add } from './math';\n\ntest('addition', () => {\n    expect(add(2, 3)).toBe(5);\n});\n```\n5. **Best Practices**\n   - Use clear and descriptive variable names.\n   - Avoid using the `any` type whenever possible.\n   - Enable strict TypeScript options for safer code.\n\nThese practical approaches enable developers to leverage TypeScript's benefits in real-world projects, enhancing productivity and code quality."
	},
	"sql": {
		"dataquery": "# Data Query and Retrieval\n\nSQL is a domain-specific language for managing and manipulating relational databases.\nIt is primarily used to query and retrieve data from databases. Here are some fundamental concepts and SQL syntax for data retrieval:\n\n1. **SELECT Statement**:\n   - The `SELECT` statement retrieves data from one or more tables.\n```sql\nSELECT column1, column2\nFROM table_name\nWHERE condition;\n```\n2. **FROM Clause**:\n   - The `FROM` clause specifies the table(s) from which to retrieve data.\n\n```sql\nSELECT *\nFROM employees;\n```\n3. **ORDER BY Clause**:\n   - The `ORDER BY` clause sorts the result set based on one or more columns.\n\n```sql\nSELECT customer_name, order_date\nFROM orders\nORDER BY order_date DESC;\n```\n4. **GROUP BY Clause**:\n   - The `GROUP BY` clause groups data for aggregation operations.\n\n```sql\nSELECT category, AVG(price) AS avg_price\nFROM products\nGROUP BY category;\n```\n5. **HAVING Clause:**:\n   - The `HAVING` clause applies conditions to grouped data.\n```sql\nSELECT category, AVG(price) AS avg_price\nFROM products\nGROUP BY category\nHAVING AVG(price) > 100;\n```\n\nRemember, SQL's querying capabilities are crucial for extracting meaningful insights from databases.",
		"datamodifications": "# Data Modification and Management\n\nSQL also includes operations for modifying, inserting, updating, and deleting data within databases. Here are key concepts and SQL statements for data management:\n\n1. **INSERT Statement**:\n   - The `INSERT` statement adds new records into a table.\n```sql\nINSERT INTO employees (first_name, last_name, job_title)\nVALUES ('John', 'Doe', 'Manager');\n```\n2. **UPDATE Statement**:\n   - The `UPDATE` statement modifies existing records in a table.\n\n```sql\nUPDATE products\nSET price = price * 1.1\nWHERE category = 'Electronics';\n```\n3. **DELETE Statement**:\n   - The `DELETE` statement removes records from a table.\n\n```sql\nDELETE FROM customers\nWHERE last_purchase_date < '2022-01-01';\n```\n4. **CREATE TABLE Statement**:\n   - The `CREATE TABLE` statement defines the structure of a new table.\n\n```sql\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n```\n5. **ALTER TABLE Statement**:\n   - The `ALTER TABLE` statement modifies an existing table structure.\n\n```sql\nALTER TABLE customers\nADD COLUMN phone_number VARCHAR(15);\n```\n6. **DROP TABLE Statement**:\n   - The `DROP TABLE` statement deletes an entire table and its data.\n\n```sql\nDROP TABLE obsolete_data;\n```\n7. **Transactions**:\n   - Transactions ensure the integrity of data modifications using `BEGIN`, `COMMIT`, and `ROLLBACK`.\n\n```sql\nBEGIN;\nUPDATE account SET balance = balance - 100 WHERE account_id = 123;\nUPDATE account SET balance = balance + 100 WHERE account_id = 456;\nCOMMIT;\n```\nThese SQL operations are essential for managing and maintaining data within a database.",
		"dataindexing": "# Database Schema and Indexing\n\nEfficient database design and optimization are critical for performance. Here are key concepts and SQL statements related to database schema and indexing:\n\n1. **CREATE DATABASE Statement**:\n   - The `CREATE DATABASE` statement establishes a new database.\n\n```sql\nCREATE DATABASE mydb;\n```\n2. **CREATE INDEX Statement**:\n   - The `CREATE INDEX` statement improves query performance by creating indexes on columns.\n\n```sql\nCREATE INDEX idx_last_name ON employees (last_name);\n```\n3. **Primary Key and Foreign Key**:\n   - `Primary` keys enforce data integrity, and `foreign` keys establish relationships between tables.\n\n```sql\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n```\n4. **Normalization**:\n   - Normalization reduces data redundancy and improves database design.\n\n```sql\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    address VARCHAR(255)\n);\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    PRIMARY KEY (student_id, course_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n```\n5. **Views**:\n   - `VIEWS` create virtual tables based on `SELECT` queries.\n\n```sql\nCREATE VIEW high_selling_products AS\nSELECT product_name, SUM(quantity_sold) AS total_sold\nFROM sales\nGROUP BY product_name\nHAVING SUM(quantity_sold) > 1000;\n```\n6. **Stored Procedures and Functions**:\n   - Stored procedures and functions are reusable code for data manipulation and processing.\n\n```sql\nCREATE PROCEDURE sp_GetEmployeeByID(IN employee_id INT)\nBEGIN\n    SELECT * FROM employees WHERE employee_id = employee_id;\nEND;\n```\n7. **Triggers**:\n   - `TRIGGERS` automatically execute actions in response to specific database events.\n\n```sql\nCREATE TRIGGER before_insert_employee\nBEFORE INSERT ON employees\nFOR EACH ROW\nBEGIN\n    SET NEW.creation_date = NOW();\nEND;\n```\n\nEfficient schema design and indexing are crucial for optimizing database performance."
	}
}
